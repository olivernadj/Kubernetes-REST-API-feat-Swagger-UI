---
apiVersion: v1
kind: Namespace
metadata:
  name: api-proxy

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: api-proxy-cluster-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: default
  namespace: api-proxy

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-proxy-config
  namespace: api-proxy
data:
  default.conf: |2-

    server {
        listen              80;
        server_name         localhost;
        location / {
            proxy_pass https://kubernetes.default.svc;
            proxy_set_header Authorization "Bearer $token_placeholder";
            proxy_ssl_trusted_certificate /var/run/secrets/kubernetes.io/serviceaccount/ca.crt;
        }
    }


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-proxy
  namespace: api-proxy
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-proxy
  template:
    metadata:
      labels:
        app: api-proxy
    spec:
      initContainers:
      - name: init-token
        image: busybox:1.28
        command: ['sh', '-c', "cp /default.conf /shared-data/default.conf && TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) && sed -i 's/$token_placeholder/'$TOKEN'/' /shared-data/default.conf"]
        volumeMounts:
          - name: "shared-data"
            mountPath: "/shared-data"
          - name: "nginx-config"
            mountPath: "/default.conf"
            subPath: "default.conf"
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80
        volumeMounts:
          - name: "shared-data"
            mountPath: "/etc/nginx/conf.d/default.conf"
            subPath: "default.conf"
      volumes:
        - name: "shared-data"
          emptyDir: {}
        - name: "nginx-config"
          configMap:
            name: "api-proxy-config"

---
kind: Service
apiVersion: v1
metadata:
  name: api-proxy
  namespace: api-proxy
spec:
  selector:
    app: api-proxy
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kube-api-ingress
  namespace: api-proxy
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  rules:
  - host: kube-api.loc
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service: 
            name: api-proxy
            port:
              number: 80
